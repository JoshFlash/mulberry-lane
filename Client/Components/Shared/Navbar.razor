<nav class="navbar nav-item navbar-expand-md d-flex navbar-brand bg-black-80 shadow-no-hover justify-content-between align-items-baseline">
    <a href="/" class="navbar-brand md-f-size-1-5 text-light text-opacity-75 ps-2 m-1 mx-lg-5 fw-bolder">
        Josh Flash &ensp;<span class="text-light text-opacity-75 fw-light"> &diams; &ensp; Game Developer</span>
    </a>
    <button class="navbar-toggler mx-1" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle Navigations">
        <span class="navbar-toggler-icon fw-bold text-light text-opacity-75"> &Xi; </span>
    </button>
    <div class="collapse navbar-collapse" id="navbarSupportedContent">
        <ul class="navbar-nav">
            <li class="nav-item">
            <a href="@kHomePageUriPath" class="nav-link text-light text-opacity-75 mx-5 md-and-smaller-my-3 @(IsPageActive(kHomePageUriPath) ? "active" : string.Empty)">
                Home
            </a>
            </li>
            <li class="nav-item">
                <a href="@kPostsPageUriPath" class="nav-link text-light text-opacity-75 mx-5 md-and-smaller-my-3 @(IsPageActive(kPostsPageUriPath) ? "active" : string.Empty)">
                    Posts
                </a>
            </li>
        </ul>
    </div>
</nav>

@code {
    [Inject] 
    public NavigationManager NavManager { get; set; }

    private const string kHomePageUriPath = "/";
    private const string kPostsPageUriPath = "/posts";

    public bool IsPageActive(string uriPath)
    {
        // Skip 3 '/' to only check the route relative to the domain, i.e. remove "https://blog.domain-name.com/"
        var currentUriPath = NavManager.Uri.Split('/').Skip(3);
        if (uriPath == kHomePageUriPath && currentUriPath.Last().Length == 0)
        {
            return true;
        }

        // uri is passed with a preceding '/' so skip 1 to avoid empty strings
        var targetPath = uriPath.Split('/').Skip(1);
        if (targetPath.Any(subPath => !currentUriPath.Contains(subPath)))
        {
            return false;
        }

        return true;
    }
}
